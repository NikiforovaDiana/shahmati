1)  Функции.
	1) В EcmoScript 6 появятся, так называемые, arrow-функции. (стрелочные)
Было (Реализация без стрелочных функций):
let squares = [ 1, 2, 3 ].map(function (x) { return x * x });

Изменения (Пример стрелочных функций): 
let squares = [ 1, 2, 3 ].map(x => x * x);

Отличие от традиционных функций:
•	Лексическое связывание. Значения специальных переменных this, super иarguments определяются не тем, как стрелочные функции были вызваны, а тем, как они были созданы.
•	Неизменяемые this, super и arguments. Значения этих переменных внутри стрелочных функций остаются неизменными на протяжении всего жизненного цикла функции.
•	Стрелочные функции не могут быть использованы как конструктор и кидают ошибку при использовании с оператором new.
•	Недоступность «собственного» значения переменной arguments.

Комментарий:
1)  Связывание (binding) используется довольно часто в JavaScript и довольно легко потерять нужное значение this при использовании традиционных функций, что может привести к ошибкам.
2) JS-движки смогут легко оптимизировать выполнение стрелочных функций за счет этих ограничений (в противоположность традиционным функциям, которые могут быть использованы в качестве конструктора и которые свободны для модификации специальных переменных).

2) Циклы
For-in
Было: 
let arr = [ "blue", "green" ];
arr.notAnIndex = 123;
Array.prototype.protoProp = 456;

for(var x in arr) {
   console.log(x); // Напечатает blue, green, notAnIndex, protoProp
}

Изменения: Появился For-of
for(var x of arr) {
   console.log(x); }// Напечатает только blue, green

Комментарий: for-in в JavaScript итерирует по всем полям объекта (включая наследованных). Т.е. итерироваться по значениям массива можно, но могут возникнуть несогласования с тем, что получили и что ожидали. В ECMAScript 6 появится цикл for-of, который решит данную проблему.
